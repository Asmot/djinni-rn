/**
  * Copyright 2014 Dropbox, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  * This file has been modified by Snap, Inc.
  */

package djinni

import djinni.ast.Record.DerivingType
import djinni.ast._
import djinni.generatorTools._
import djinni.meta._
import djinni.writer.IndentWriter
import djinni.utils._
import mustache._


import scala.collection.mutable

import java.io.{File, FileNotFoundException, InputStreamReader, FileInputStream, Writer}
import java.io.StringWriter

/*
if is record, only generate toReadableMap and fromReadableMap
*/
class RNJavaGenerator(spec: Spec) extends RNMUstacheGenerator(spec) {
  val templateDataMap = readTemplateFilesMap(spec.rn_javaTemplateFile.get) 
  var PRE_STR = "SRN"

  override def getFileName(ident: Ident, typeParams: Seq[TypeParam], i: Interface) : String = {
    val javaClass = marshal.typename(ident, i)
    val typeParamList = javaTypeParams(typeParams)
    return s"${PRE_STR}$javaClass${typeParamList}Manager"
  }

  override def getFileName(ident: Ident, r: Record) : String = {
    return s"${PRE_STR}${ident.name}"
  }


  override def getTemplateData(annotation: Option[Annotation]) : String = {
    val key = annotation.get.value;
    return templateDataMap(key)
  }

  override def writeFinalFile(ident: String, origin: String, refs: Iterable[String], f: IndentWriter => Unit) {
    createFile(spec.rn_javaOutFolder.get, idJava.ty(ident) + ".java", (w: IndentWriter) => {
      w.wl("// AUTOGENERATED FILE - DO NOT MODIFY!")
      w.wl("// This file was generated by Djinni from " + origin)
      w.wl
      spec.rn_javaPackage.foreach(s => w.wl(s"package $s;").wl)
      if (refs.nonEmpty) {
        refs.foreach(s => w.wl(s"import $s;"))
        w.wl
      }
      f(w)
    })
  }

}
