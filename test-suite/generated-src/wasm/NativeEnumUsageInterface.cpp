// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#include "NativeEnumUsageInterface.hpp"  // my header
#include "NativeColor.hpp"

namespace djinni_generated {

em::val NativeEnumUsageInterface::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "e",
        "o",
        "l",
        "s",
        "m",
    });
    return methods;
}

int32_t NativeEnumUsageInterface::e(const CppType& self, int32_t w_e) {
    return ::djinni_generated::NativeColor::fromCpp(self->e(::djinni_generated::NativeColor::toCpp(w_e)));
}
em::val NativeEnumUsageInterface::o(const CppType& self, const em::val& w_o) {
    return ::djinni::Optional<std::experimental::optional, ::djinni_generated::NativeColor>::fromCpp(self->o(::djinni::Optional<std::experimental::optional, ::djinni_generated::NativeColor>::toCpp(w_o)));
}
em::val NativeEnumUsageInterface::l(const CppType& self, const em::val& w_l) {
    return ::djinni::List<::djinni_generated::NativeColor>::fromCpp(self->l(::djinni::List<::djinni_generated::NativeColor>::toCpp(w_l)));
}
em::val NativeEnumUsageInterface::s(const CppType& self, const em::val& w_s) {
    return ::djinni::Set<::djinni_generated::NativeColor>::fromCpp(self->s(::djinni::Set<::djinni_generated::NativeColor>::toCpp(w_s)));
}
em::val NativeEnumUsageInterface::m(const CppType& self, const em::val& w_m) {
    return ::djinni::Map<::djinni_generated::NativeColor, ::djinni_generated::NativeColor>::fromCpp(self->m(::djinni::Map<::djinni_generated::NativeColor, ::djinni_generated::NativeColor>::toCpp(w_m)));
}

::testsuite::color NativeEnumUsageInterface::JsProxy::e(::testsuite::color e) {
    return ::djinni_generated::NativeColor::toCpp(_jsRef().call<int32_t>("e", ::djinni_generated::NativeColor::fromCpp(e)));
}

std::experimental::optional<::testsuite::color> NativeEnumUsageInterface::JsProxy::o(std::experimental::optional<::testsuite::color> o) {
    return ::djinni::Optional<std::experimental::optional, ::djinni_generated::NativeColor>::toCpp(_jsRef().call<em::val>("o", ::djinni::Optional<std::experimental::optional, ::djinni_generated::NativeColor>::fromCpp(o)));
}

std::vector<::testsuite::color> NativeEnumUsageInterface::JsProxy::l(const std::vector<::testsuite::color> & l) {
    return ::djinni::List<::djinni_generated::NativeColor>::toCpp(_jsRef().call<em::val>("l", ::djinni::List<::djinni_generated::NativeColor>::fromCpp(l)));
}

std::unordered_set<::testsuite::color> NativeEnumUsageInterface::JsProxy::s(const std::unordered_set<::testsuite::color> & s) {
    return ::djinni::Set<::djinni_generated::NativeColor>::toCpp(_jsRef().call<em::val>("s", ::djinni::Set<::djinni_generated::NativeColor>::fromCpp(s)));
}

std::unordered_map<::testsuite::color, ::testsuite::color> NativeEnumUsageInterface::JsProxy::m(const std::unordered_map<::testsuite::color, ::testsuite::color> & m) {
    return ::djinni::Map<::djinni_generated::NativeColor, ::djinni_generated::NativeColor>::toCpp(_jsRef().call<em::val>("m", ::djinni::Map<::djinni_generated::NativeColor, ::djinni_generated::NativeColor>::fromCpp(m)));
}

EMSCRIPTEN_BINDINGS(enum_usage_interface) {
    em::class_<::testsuite::EnumUsageInterface>("EnumUsageInterface")
        .smart_ptr<std::shared_ptr<::testsuite::EnumUsageInterface>>("EnumUsageInterface")
        .function("nativeDestroy", &NativeEnumUsageInterface::nativeDestroy)
        .function("e", NativeEnumUsageInterface::e)
        .function("o", NativeEnumUsageInterface::o)
        .function("l", NativeEnumUsageInterface::l)
        .function("s", NativeEnumUsageInterface::s)
        .function("m", NativeEnumUsageInterface::m)
        ;
}

}  // namespace djinni_generated
