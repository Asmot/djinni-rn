// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from varnames.djinni

#include "NativeVarnameInterface.hpp"  // my header
#include "NativeVarnameRecord.hpp"

namespace djinni_generated {

em::val NativeVarnameInterface::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "Rmethod",
        "Imethod",
    });
    return methods;
}

em::val NativeVarnameInterface::_rmethod_(const CppType& self, const em::val& w__r_arg_) {
    return ::djinni_generated::NativeVarnameRecord::fromCpp(self->_rmethod_(::djinni_generated::NativeVarnameRecord::toCpp(w__r_arg_)));
}
em::val NativeVarnameInterface::_imethod_(const CppType& self, const em::val& w__i_arg_) {
    return ::djinni_generated::NativeVarnameInterface::fromCpp(self->_imethod_(::djinni_generated::NativeVarnameInterface::toCpp(w__i_arg_)));
}

::testsuite::VarnameRecord NativeVarnameInterface::JsProxy::_rmethod_(const ::testsuite::VarnameRecord & _r_arg_) {
    return ::djinni_generated::NativeVarnameRecord::toCpp(_jsRef().call<em::val>("Rmethod", ::djinni_generated::NativeVarnameRecord::fromCpp(_r_arg_)));
}

std::shared_ptr<::testsuite::VarnameInterface> NativeVarnameInterface::JsProxy::_imethod_(const std::shared_ptr<::testsuite::VarnameInterface> & _i_arg_) {
    return ::djinni_generated::NativeVarnameInterface::toCpp(_jsRef().call<em::val>("Imethod", ::djinni_generated::NativeVarnameInterface::fromCpp(_i_arg_)));
}

EMSCRIPTEN_BINDINGS(_varname_interface_) {
    em::class_<::testsuite::VarnameInterface>("VarnameInterface")
        .smart_ptr<std::shared_ptr<::testsuite::VarnameInterface>>("VarnameInterface")
        .function("nativeDestroy", &NativeVarnameInterface::nativeDestroy)
        .function("Rmethod", NativeVarnameInterface::_rmethod_)
        .function("Imethod", NativeVarnameInterface::_imethod_)
        ;
}

}  // namespace djinni_generated
