// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from client_interface.djinni

#include "NativeClientInterface.hpp"  // my header
#include "NativeClientReturnedRecord.hpp"

namespace djinni_generated {

em::val NativeClientInterface::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "get_record",
        "identifier_check",
        "return_str",
        "meth_taking_interface",
        "meth_taking_optional_interface",
    });
    return methods;
}

em::val NativeClientInterface::get_record(const CppType& self, int64_t w_record_id,const std::string& w_utf8string,const em::val& w_misc) {
    return ::djinni_generated::NativeClientReturnedRecord::fromCpp(self->get_record(::djinni::I64::toCpp(w_record_id),
                                                                                    ::djinni::String::toCpp(w_utf8string),
                                                                                    ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(w_misc)));
}
double NativeClientInterface::identifier_check(const CppType& self, const em::val& w_data,int32_t w_r,int64_t w_jret) {
    return ::djinni::F64::fromCpp(self->identifier_check(::djinni::Binary::toCpp(w_data),
                                                         ::djinni::I32::toCpp(w_r),
                                                         ::djinni::I64::toCpp(w_jret)));
}
std::string NativeClientInterface::return_str(const CppType& self) {
    return ::djinni::String::fromCpp(self->return_str());
}
std::string NativeClientInterface::meth_taking_interface(const CppType& self, const em::val& w_i) {
    return ::djinni::String::fromCpp(self->meth_taking_interface(::djinni_generated::NativeClientInterface::toCpp(w_i)));
}
std::string NativeClientInterface::meth_taking_optional_interface(const CppType& self, const em::val& w_i) {
    return ::djinni::String::fromCpp(self->meth_taking_optional_interface(::djinni::Optional<std::experimental::optional, ::djinni_generated::NativeClientInterface>::toCpp(w_i)));
}

::testsuite::ClientReturnedRecord NativeClientInterface::JsProxy::get_record(int64_t record_id,const std::string & utf8string,const std::experimental::optional<std::string> & misc) {
    return ::djinni_generated::NativeClientReturnedRecord::toCpp(_jsRef().call<em::val>("get_record", ::djinni::I64::fromCpp(record_id),
                                                                                                      ::djinni::String::fromCpp(utf8string),
                                                                                                      ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(misc)));
}

double NativeClientInterface::JsProxy::identifier_check(const std::vector<uint8_t> & data,int32_t r,int64_t jret) {
    return ::djinni::F64::toCpp(_jsRef().call<double>("identifier_check", ::djinni::Binary::fromCpp(data),
                                                                          ::djinni::I32::fromCpp(r),
                                                                          ::djinni::I64::fromCpp(jret)));
}

std::string NativeClientInterface::JsProxy::return_str() {
    return ::djinni::String::toCpp(_jsRef().call<std::string>("return_str"));
}

std::string NativeClientInterface::JsProxy::meth_taking_interface(const std::shared_ptr<::testsuite::ClientInterface> & i) {
    return ::djinni::String::toCpp(_jsRef().call<std::string>("meth_taking_interface", ::djinni_generated::NativeClientInterface::fromCpp(i)));
}

std::string NativeClientInterface::JsProxy::meth_taking_optional_interface(const std::shared_ptr<::testsuite::ClientInterface> & i) {
    return ::djinni::String::toCpp(_jsRef().call<std::string>("meth_taking_optional_interface", ::djinni::Optional<std::experimental::optional, ::djinni_generated::NativeClientInterface>::fromCpp(i)));
}

EMSCRIPTEN_BINDINGS(client_interface) {
    em::class_<::testsuite::ClientInterface>("client_interface")
        .smart_ptr<std::shared_ptr<::testsuite::ClientInterface>>("client_interface")
        .function("nativeDestroy", &NativeClientInterface::nativeDestroy)
        .function("get_record", NativeClientInterface::get_record)
        .function("identifier_check", NativeClientInterface::identifier_check)
        .function("return_str", NativeClientInterface::return_str)
        .function("meth_taking_interface", NativeClientInterface::meth_taking_interface)
        .function("meth_taking_optional_interface", NativeClientInterface::meth_taking_optional_interface)
        ;
}

}  // namespace djinni_generated
